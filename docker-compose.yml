version: "2"
services:
  cli:
    build: ./cli
    command: ["/bin/sleep", "infinity"]
    image: storj-cli
  mongos:
    image: mongo:3.4.0
    ports:
      - "27017"
    volumes:
      - ./mongodb/files/scripts/start_mongos.sh:/usr/local/bin/start_mongos.sh
      - ./mongodb/files/ssl/mongodb.pem:/etc/mongodb.pem
    # need to do `sh.addShard('storjsdk/mongod:27018')`
    #command: ['mongos', '--configdb', 'storjsdkcfg/mongoc:27019']
    #command: ['/bin/sleep', 'infinity']
    command: ['/usr/local/bin/start_mongos.sh']
  mongoc:
    image: mongo:3.4.0
    volumes:
      - ./mongodb/data/mongoc:/data/configdb
      - ./mongodb/files/scripts/start_mongoc.sh:/usr/local/bin/start_mongoc.sh
      - ./mongodb/files/ssl/mongodb.pem:/etc/mongodb.pem
    ports:
      - "27019"
    # need to wrap start and rs.initiate() this if its not been done already
    #command: ['mongod', '--configsvr', '--replSet', 'storjsdkcfg']
    #command: ['/bin/sleep', 'infinity']
    command: ['/usr/local/bin/start_mongoc.sh']
  mongod:
    image: mongo:3.4.0
    volumes:
      - ./mongodb/data/mongod:/data/db
      - ./mongodb/files/scripts/start_mongod.sh:/usr/local/bin/start_mongod.sh
      - ./mongodb/files/ssl/mongodb.pem:/etc/mongodb.pem
    ports:
      - "27018"
    # need to wrap start and rs.initiate() this if its not been done already
    # need to pass initiate a config setting a sane hostname `mongod` for the node
    # need to set a hosts entry for this host `echo "172.19.0.10 mongod" >> /etc/hosts`
    # find the ip in the env vars?
    #command: ['mongod', '--shardsvr', '--replSet', 'storjsdk']
    #command: ['/bin/sleep', 'infinity']
    command: ['/usr/local/bin/start_mongod.sh']
  mq:
    image: rabbitmq:3.6.6
  bridge:
    build: ./bridge
    volumes:
      - ./bridge/config.json:/bridge/config.json
      - ./vendor:/usr/src/vendor
    environment:
      - DOCKER_SERVICES=db:27017
    ports:
      - "8080"
  billing:
    build:
      context: ./billing/billing
      dockerfile: ./dockerfiles/billing-development.dockerfile
    volumes:
      - ./vendor:/usr/src/vendor
    environment:
      DOCKER_SERVICES: "db:27017"
      MONGO_URL: "mongodb://db:27017/storj-sandbox"
      LOG_LEVEL: "4"
    ports:
      - "3000"
  billing-importer:
    build:
      context: ./billing/billing
      dockerfile: ./dockerfiles/billing-importer.dockerfile
    volumes:
      - ./vendor:/usr/src/vendor
    environment:
      DOCKER_SERVICES: "db:27017,billing:3000"
      MONGO_URL: "mongodb://db:27017/storj-sandbox"
      BILLING_URL: "http://billing:3000"
      LOG_LEVEL: "4"
  redis:
    image: redis
    ports:
      - "6379"
    environment:
      - REDIS_PASS=abc123
    command: ["/bin/sh", "-c", "redis-server --requirepass \"$${REDIS_PASS}\""]
  landlord:
    build: ./complex
    volumes:
      - ./complex/landlord.config.json:/root/config.template.json
    command: ["./bin/storj-complex.js", "-c", "/root/config.json"]
    environment:
      - DOCKER_SERVICES=bridge:8080,db:27017,mq:5672
  renter:
    build: ./complex
    volumes:
      - ./complex/renter.config.json:/root/config.template.json
      - ./complex/hd-private.key:/root/hd-private.key
    command: ["./bin/storj-complex.js", "-c", "/root/config.json"]
    environment:
      - DOCKER_SERVICES=bridge:8080,db:27017,mq:5672
    restart: on-failure
    ports:
      - "4000"
  share:
    build: ./share
    volumes:
      - ./share/instances:/share/instances
      - ./share/templates:/share/templates
      - ./vendor:/usr/src/vendor
    environment:
      - DOCKER_SERVICES=renter:4000
      - affinity:container!=/cadvisor/
    ports:
      - "9000"
  proxy:
    build: ./vpn
    ports:
      - "127.0.0.1:13194:13194"
    command: TCP-LISTEN:13194,fork TCP:172.17.0.1:1194
  openvpn:
    build: ./vpn/openvpn
    volumes:
      - ./vpn:/local
      - ./vpn/config:/etc/openvpn
    network_mode: host
    cap_add:
      - NET_ADMIN
    environment:
      dest: storj-local.ovpn
      DEBUG: '1'
      DOCKER_NETWORK: storjsdk_default
    command: ["/local/helpers/run.sh"]
  bridge-gui:
    build: ./bridge-gui/bridge-gui
    ports:
      - "8080"
    environment:
      - APIHOST_VAL=bridge-ssl-proxy
      - APIPORT_VAL=443
      - APIPROTOCOL_VAL=https
      - NODE_ENV_VAL=production
      - STRIPE_PUBLISHABLE_KEY_VAL=pk_test_9jNycwEK9kRyCEbKpbMJI1rO
      - APOLLO_CLIENT_URL_VAL=https://billing-ssl-proxy
      - OUTPUT_PUBLIC_PATH_PROTOCOL_VAL=https
      - OUTPUT_PUBLIC_PATH_URL_VAL=bridge-gui-ssl-proxy
    command: ["./dockerfiles/scripts/start-bridge-gui"]
  bridge-gui-ssl-proxy:
    image: storjlabs/nginx-ssl-proxy:latest
    environment:
      - ENABLE_SSL=true
      - TARGET_SERVICE=bridge-gui:8080
    ports:
      - "443"
    volumes:
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/cert.pem:/etc/secrets/tls.crt
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/key.pem:/etc/secrets/tls.key
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/dhparams.pem:/etc/secrets/tls.dhparam
  bridge-ssl-proxy:
    image: storjlabs/nginx-ssl-proxy:latest
    environment:
      - ENABLE_SSL=true
      - TARGET_SERVICE=bridge:8080
    ports:
      - "443"
    volumes:
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/cert.pem:/etc/secrets/tls.crt
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/key.pem:/etc/secrets/tls.key
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/dhparams.pem:/etc/secrets/tls.dhparam
  redis:
    image: redis
    ports:
      - "6379"
  bridge-gui-vue-build:
    build: ./bridge-gui/bridge-gui-vue
    volumes:
      - ./bridge-gui/bridge-gui-vue/dist:/opt/bridge-gui-vue/dist
  bridge-gui-vue:
    build:
      context: ./bridge-gui
      dockerfile: ./bridge-gui-vue.dockerfile
    depends_on:
      - "bridge-gui-vue-build"
    ports:
      - "443"
    environment:
      - NODE_ENV_VAL=production
      - STRIPE_PUBLISHABLE_KEY_VAL=pk_test_3jNyjwE39k9y2EbKpIM0Ilz1
      - BILLING_URL_VAL=https://billing-ssl-proxy
    volumes:
      - ./bridge-gui/files/certs.dev/cert.pem:/etc/nginx/ssl/server.crt
      - ./bridge-gui/files/certs.dev/key.pem:/etc/nginx/ssl/server.key
  billing-ssl-proxy:
    image: storjlabs/nginx-ssl-proxy:latest
    environment:
      - ENABLE_SSL=true
      - TARGET_SERVICE=billing:3000
    ports:
      - "443"
    volumes:
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/cert.pem:/etc/secrets/tls.crt
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/key.pem:/etc/secrets/tls.key
      - ./bridge-gui/bridge-gui/dockerfiles/files/certs.dev/dhparams.pem:/etc/secrets/tls.dhparam
  redis:
    image: redis
    ports:
      - "6379"
